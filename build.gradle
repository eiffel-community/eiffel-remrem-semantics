/*
 Copyright 2018 Ericsson AB.
 For a full list of individual contributors, please see the commit history.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
apply plugin: 'java'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'jsonschema2pojo'
apply plugin: "com.github.kt3k.coveralls"

buildscript {
    repositories {
      mavenLocal()
      jcenter()
    }
    dependencies {
      classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"
      classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:latest.integration'
      classpath 'joda-time:joda-time:2.2'
      classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
    }
  }

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        html.destination "${buildDir}/jacocoHtml"
    }
}

allprojects {
    repositories {
        maven { url "https://jitpack.io" }
    }
}

jar {
    baseName = 'eiffel-remrem-semantics'
    version =  '0.4.3'
    manifest {
        attributes('remremVersionKey': 'semanticsVersion')
        attributes('semanticsVersion': version)
        attributes('isEndpointVersion': 'true')
        attributes('groupId': 'com.github.Ericsson')
        attributes('artifactId': baseName)
    }
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
	{
		//excluding unwanted files in jar generation these are generated by eclipse jgit api
		exclude "META-INF/*.SF"
		exclude "META-INF/*.RSA"
  }
}

shadowJar {
    baseName = 'eiffel-remrem-semantics'
    version =  '0.4.3'
    classifier = ''
}

apply plugin: 'eclipse'

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'libs'
    }
}

install.dependsOn shadowJar

dependencies {
    compile 'com.github.Ericsson:eiffel-remrem-protocol-interface:0.0.8'
    compile('com.github.fge:json-schema-validator:2.2.8')
    {
    // we need to exclude jackson-databind here and add a
    // new version afterwards. The reason is the incompatibility
    // with applications based on newer versions of Spring framework
    // and using semantics as a library 
        exclude module: 'jackson-databind'
    }
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    compile 'org.mockito:mockito-core:2.8.47'
    compile 'javax.inject:javax.inject:1'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    testCompile 'junit:junit:4.12'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'commons-io:commons-io:2.6'
    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.5.0.201609210915-r'
}

//compileSourceCode task to compile the source code 
task compileSourceCode (type: JavaCompile) {
	source = sourceSets.main.java.srcDirs
	classpath = sourceSets.main.compileClasspath
	destinationDir = sourceSets.main.output.classesDir
}

//runJava task to clone schemas from github and then modify schema's to generate pojo's
task runJava(type:JavaExec){
    doFirst{
        
        // Remote Eiffel repository URL to clone

        def eiffelRepoURL = 'https://github.com/Ericsson/eiffel.git'

        //specific branch name to clone or if it is a tag it should be like 'tags/name of the tag' ex: 'tags/xxxxxx'

        def eiffelRepoBranch = 'tags/edition-toulouse'

        // Remote Continuous Operations repository URL

        def eiffelOperationsExtensionRepoUrl = 'https://github.com/Ericsson/eiffel-operations-extension.git'

        //branch name to perform clone or if it is a tag it should be like 'tags/name of the tag' ex: 'tags/xxxxxx'

        def operationsRepoBranch = 'tags/Toulouse'

        main 'com.ericsson.eiffel.remrem.semantics.clone.PrepareLocalEiffelSchemas'
        classpath sourceSets.main.runtimeClasspath
        args=	[eiffelRepoURL, eiffelRepoBranch, eiffelOperationsExtensionRepoUrl, operationsRepoBranch]
    }
}

//please set 'runJava.enabled= true' to execute the :runJava task if needed only.
runJava.enabled=false;

/*To execute the task compileSourceCode first in gradle build when runJava.enabled=true

please uncomment this compileSourceCode.execute() when runJava method enabled(runJava.enabled=true)*/

//compileSourceCode.execute();

//To execute the runJava task before jsonSchema2pojo plugin execution .
generateJsonSchema2Pojo.dependsOn runJava

//This task is used to generate Eiffel events from json schema using jsonschema2pojo plugin.
jsonSchema2Pojo {
    source = files("${sourceSets.main.output.resourcesDir}/schemas/input")
    targetDirectory = file("src/main/java")
    targetPackage = 'com.ericsson.eiffel.semantics.events'
    useCommonsLang3 = true
    includeHashcodeAndEquals = false
    includeToString = false
    annotationStyle= 'gson'
  }