apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        html.destination "${buildDir}/jacocoHtml"
    }
}

allprojects {
    repositories {
        maven { url "https://jitpack.io" }
    }
}

jar {
    baseName = 'remrem-semantics'
    version =  '0.1.0'
}

shadowJar {
    baseName = 'remrem-semantics'
    version =  '0.1.0'
    classifier = ''
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "https://jitpack.io" }
    maven {
        url "https://eiffel.lmera.ericsson.se/nexus/service/local/repositories/releases/content"
    }
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'libs'
    }
}

install.dependsOn shadowJar

//configurations {
//    runtime.exclude group: 'com.github.Ericsson', module: 'eiffel-remrem-shared'
//    runtime.exclude group: 'org.slf4j', module: 'slf4j-api'
//}

dependencies {
    compile 'com.github.Ericsson:eiffel-remrem-shared:0.1.4'
    compile 'com.github.fge:json-schema-validator:2.2.6'
    compile 'org.slf4j:slf4j-api:1.7.18'
    compile 'com.google.protobuf:protobuf-java:3.0.0-beta-1'
    compile 'com.google.protobuf:protobuf-java-util:3.0.0-beta-1'
    compile group: 'com.google.code.gson', name: 'gson', version: '1.7.2'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.8'
    testCompile 'junit:junit:4.12'
}


sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            // include self written and generated code
            srcDirs 'src/main/java', 'generated-sources/main/java'
        }
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
    }

    generateProtoTasks.generatedFilesBaseDir = 'src'

    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each { task ->
            // Here you can configure the task
        }

        // In addition to all(), you may get the task collection by various
        // criteria:

        // (Java only) returns tasks for a sourceSet
        ofSourceSet('main')

    }
}